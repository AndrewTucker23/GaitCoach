name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select newest Xcode 16.x (and show versions)
        run: |
          set -e
          for v in 16.6 16.5 16.4 16.3 16.2 16.1 16.0; do
            if [ -d "/Applications/Xcode_${v}.app" ]; then
              sudo xcode-select -s "/Applications/Xcode_${v}.app"
              echo "Using Xcode $v"
              break
            fi
          done
          xcodebuild -version
          xcodebuild -showsdks

      - name: Create simulator
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          echo "== List runtimes =="
          xcrun simctl list runtimes

          # Get the latest installed iOS runtime identifier (e.g. com.apple.CoreSimulator.SimRuntime.iOS-18-6)
          LATEST_IOS_RUNTIME=$(xcrun simctl list runtimes | awk '/iOS [0-9]+\.[0-9]+/ {print $NF}' | tail -1)
          if [ -z "$LATEST_IOS_RUNTIME" ]; then
            echo "No iOS Simulator runtime identifier found"; exit 1
          fi
          echo "Using runtime: $LATEST_IOS_RUNTIME"

          # Prefer iPhone 16 Pro; fall back to 15 Pro
          DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
          if ! xcrun simctl list devicetypes | grep -q "iPhone 16 Pro"; then
            DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro"
          fi
          echo "Using device type: $DEV_TYPE"

          # Clean any previous device with the same name
          xcrun simctl delete "CI-iPhone" >/dev/null 2>&1 || true

          # Create & boot
          UDID=$(xcrun simctl create "CI-iPhone" "$DEV_TYPE" "$LATEST_IOS_RUNTIME")
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b

      - name: Build & Test
        run: |
          set -euo pipefail
          xcodebuild \
            -project GaitCoach.xcodeproj \
            -scheme GaitCoach \
            -destination "id=${{ steps.sim.outputs.udid }}" \
            -configuration Debug \
            -testPlan GaitCoachTests \
            clean test

      - name: Teardown simulator
        if: always()
        run: |
          xcrun simctl shutdown "${{ steps.sim.outputs.udid }}" || true
          xcrun simctl delete   "${{ steps.sim.outputs.udid }}" || true
