name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-15   # <â€” newer image with newer Xcode/runtimes

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select newest Xcode 16.x
        run: |
          set -e
          for v in 16.6 16.5 16.4 16.3 16.2 16.1 16.0; do
            if [ -d "/Applications/Xcode_${v}.app" ]; then
              sudo xcode-select -s "/Applications/Xcode_${v}.app"
              echo "Using Xcode $v"
              break
            fi
          done
          xcodebuild -version
          xcodebuild -showsdks

      - name: Create simulator (match SDK version)
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          # Which simulator SDK does the selected Xcode support? (e.g. iphonesimulator18.6)
          SDK_VER=$(xcodebuild -showsdks | awk '/iphonesimulator/ {print $NF}' | tail -1 | sed 's/iphonesimulator//')
          RUNTIME_ID="com.apple.CoreSimulator.SimRuntime.iOS-${SDK_VER//./-}"
          echo "SDK version: $SDK_VER"
          echo "Runtime ID:   $RUNTIME_ID"

          echo "== Installed runtimes =="
          xcrun simctl list runtimes

          # Ensure that runtime actually exists on the runner
          if ! xcrun simctl list runtimes | grep -q "$RUNTIME_ID"; then
            echo "Expected runtime $RUNTIME_ID is not installed on this runner."
            echo "Falling back to the latest available iOS runtime..."
            RUNTIME_ID=$(xcrun simctl list runtimes | awk '/iOS [0-9]+\.[0-9]+/ {print $NF}' | tail -1)
            echo "Fallback runtime: $RUNTIME_ID"
          fi

          # Prefer iPhone 16 Pro; fall back to 15 Pro if needed
          DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
          if ! xcrun simctl list devicetypes | grep -q "iPhone 16 Pro"; then
            DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro"
          fi
          echo "Device type: $DEV_TYPE"

          # Clean up any previous CI device
          xcrun simctl delete "CI-iPhone" >/dev/null 2>&1 || true

          # Create + boot
          UDID=$(xcrun simctl create "CI-iPhone" "$DEV_TYPE" "$RUNTIME_ID")
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b

   - name: Build & Test
  run: |
    set -euo pipefail
    xcodebuild \
      -project GaitCoach.xcodeproj \
      -scheme GaitCoach \
      -destination "id=${{ steps.sim.outputs.udid }}" \
      -configuration Debug \
      CODE_SIGNING_ALLOWED=NO \
      clean test

      - name: Teardown simulator
        if: always()
        run: |
          xcrun simctl shutdown "${{ steps.sim.outputs.udid }}" || true
          xcrun simctl delete   "${{ steps.sim.outputs.udid }}" || true
