name: iOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-15

    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode 16.x (and show versions)
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app || true
          xcodebuild -version
          xcodebuild -showsdks

      - name: Create simulator
        id: sim
        shell: bash
        run: |
          set -euo pipefail

          echo "== List runtimes =="
          xcrun simctl list runtimes

          # Grab the latest installed iOS runtime *identifier* (not the pretty string)
          RUNTIME_ID="$(xcrun simctl list runtimes | \
            sed -nE 's/.*(com\.apple\.CoreSimulator\.SimRuntime\.iOS-[0-9\-]+).*/\1/p' | tail -n1)"
          if [[ -z "$RUNTIME_ID" ]]; then
            echo "No iOS Simulator runtime identifier found"; exit 1
          fi
          echo "Using runtime: $RUNTIME_ID"

          # Prefer iPhone 16 Pro; fall back if not available on this runner
          DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-16-Pro"
          if ! xcrun simctl list devicetypes | grep -q "iPhone 16 Pro"; then
            DEV_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15-Pro"
          fi
          echo "Using device type: $DEV_TYPE"

          # Clean any previous with same name (ignore errors)
          xcrun simctl delete "CI-iPhone" >/dev/null 2>&1 || true

          # Create + boot, then wait for boot to finish
          UDID="$(xcrun simctl create CI-iPhone "$DEV_TYPE" "$RUNTIME_ID")"
          echo "udid=$UDID" >> "$GITHUB_OUTPUT"
          xcrun simctl boot "$UDID"
          xcrun simctl bootstatus "$UDID" -b

      - name: Build & Test
        shell: bash
        run: |
          set -euo pipefail
          xcodebuild \
            -project GaitCoach.xcodeproj \
            -scheme GaitCoach \
            -destination "id=${{ steps.sim.outputs.udid }}" \
            -sdk iphonesimulator \
            -configuration Debug \
            -testPlan GaitCoachTests \
            clean test

      - name: Teardown simulator
        if: always()
        run: |
          xcrun simctl shutdown "${{ steps.sim.outputs.udid }}" || true
          xcrun simctl delete   "${{ steps.sim.outputs.udid }}" || true
